Plotting
========

We have plotted a bit of data so far just to have a quick look at it, but even basic R is capable of producing a variety of plots.

Plot
----

The **plot** function does different things depending on the data you give it, but for a vector or pair of vectors the key argument is **type**.

.. code-block:: R

    # A dotplot
    data(swiss)
    plot(swiss$Agriculture,swiss$Examination)
    plot(swiss$Agriculture,swiss$Examination,pch=20,col="red")

    # A lineplot
    plot(sort(swiss$Agriculture),type="l")
    plot(sort(swiss$Agriculture),type="o",pch=20)

Some other useful arguments:

* pch - determines the point type
* col - determines the colour of the points or line
* main - give the plot a title
* xlab/ylab - label the x and y axes
* xlim/ylim - determine the range of the x and y axes

Some graphical parameters are defined not by *plot* but globally, by the **par** function. This includes things like how large the margins are around the plot or what scale the text uses. Confusingly, some of these can be passed directly with *plot*, but others can't.

Some notable parameters:

* cex - determines the scaling factor for points
* cex.lab - similarly for axis labels (xlab/ylab)
* cex.axis - similarly for axis tick labels
* cex.main - similarly for the plot title
* mar - a vector of 4 values for the bottom/left/top/right margins in that order
* mfrow - a vector of 2 values for turning one plot into a grid of AxB plots

Bar and box plots
-----------------

Although *plot* can produce a bar chart with *type=h*, **barplot** is a more specific function for doing so.

.. code-block:: R

    # A bar plot
    data(swiss)
    barplot(swiss$Fertility,names.arg=rownames(swiss),las=2)

Be wary whenever sorting your data that you maintain the order for things you might plot against it or use to label it.

Another common plot type is the **boxplot**. The function for this works well with factors, if they are provided in a **formula**.

.. code-block:: R

    # A box plot
    data(PlantGrowth)
    boxplot(weight~group,data=PlantGrowth)

Here, *group* is a factor, so the function understands we want to see the spread of *weight* as a function of *group*. Formulae can be extended to include multiple terms, in which case a box will be plotted per combination of factors.

Prettifying your plots
----------------------

A few additional options can make your plots look more complete and informative.

**grid** will add a background grid to the plot, making the axis scales easier to read. It is best used within the *plot* function, with the *panel.first* argument.

.. code-block:: R

    # Add a grid
    plot(swiss$Fertility,swiss$Agriculture,panel.first=grid())

**abline** will add arbitrary lines to a plot, either horizontal, vertical or based on a linear model.

.. code-block:: R

    # Add some lines
    abline(h=20)
    abline(v=50,col=2)
    abline(lm(swiss$Agriculture~swiss$Fertility))

**lines** and **points** will add lines or points if given x and y coordinates.

.. code-block:: R

    # Add some more lines, and points
    lines(x=c(50,50,80,80),y=c(20,80,20,80),col=2)
    points(x=65,y=45,pch=20,col=2)

And don't forget *xlab*, *ylab*, *pch*, *col*, *main* and all the *par* options.

Exercise
--------

* Make a nice plot of the anti-correlation between Examination and Agriculture in the *swiss* data.

.. container:: nextlink

    `Next: Statistics and Packages <2.4_Statistics.html>`_


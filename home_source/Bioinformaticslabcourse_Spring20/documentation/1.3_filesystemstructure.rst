
The File System
===============

You are probably used to the file system in Windows or MacOS, where directories can contain files and more directories. The linux filesystem is structured in the same way, as a tree, that begins at the 'root' directory **/**. Directories are separated by **/** backslashes.

.. image::
    /Introduction_to_Unix/contents/images/filesystem_hierarchy.png

When you are working in the command line, you are located in a directory somewhere in this tree. There are two ways to refer to a location: its **absolute path** or its **relative path**.

.. code-block:: bash

    # Absolute path
    /cluster/home/fieldc

    # Relative path
    ../../home/fieldc

The **..** refers to the directory above a location, so the relative path here goes up twice, then back down to my home directory. If a path starts with **~/** then it refers to your home directory.

.. code-block:: bash

    # Home directory
    ~/
    ./
    
    # Go up one level 
    ../
    
    

Navigation
----------

**pwd** will tell you exactly where you are in the file system. You will start off in your home folder.

.. code-block:: bash

    # Where am I?
    pwd

**ls** will list all of the files and directories where you are currently located. If you give a path as an argument, it will list the files at that location.

.. code-block:: bash

    # What is here?
    ls
    ls /nfs/home/fieldc

**cd** will change your location, your 'working directory', to the path given, absolute or relative. If no address is given, you return to your home directory.

.. code-block:: bash

    # Going places
    cd /nfs/home/fieldc
    cd ..
    cd
    
    # Going back to previous diretory
    cd -

Exercises
---------

* Use *pwd* to find out where you are in your command line session - it should be /nfs/home/<your eth name>
* Use *ls* to see if you have any files in your home directory - probably not if you have never logged in before!
* Use *cd* to go up one level and then *ls* to see all the home directories of other users on the server
* Try to go up multiple levels using cd

.. hidden-code-block:: bash
    
    # To go up one level, to the directory that contains your home directory:
    cd ..

* Use *ls* to look into the directory of another user - can you do this?
* Experiment with *cd* and *ls* to explore the directory structure on Morgan, before returning to your home directory

.. hidden-code-block:: bash

    # Let's start at the 'root':
    cd /

    # Now we can have a look in the 'science' directory that we use to store data locally
    cd science
    ls

    # There's a directory called 'teaching', what's in there?
    ls teaching

    # Finally let's go home
    cd ~

* Try to copy a directory, find out a way to copy a directory using the man and cp commands.

.. hidden-code-block:: bash
    
     # create two directories
    mkdir dir1
    mkdir dir2
    
    # try to copy dir1 into dir2
    cp dir dir2/
    cp: dir1 is a directory (not copied).
    
    # if you check 'man cp', you see that you have to use -R:
    cp -R dir dir2/

Getting Help
------------

**man** will show a manual for most basic commands, providing the correct syntax to use it and the various options available.

.. code-block:: bash

    # Read the manual
    man ls

Other programs have different ways to provide help on how to use them. A online tutorial is best, or a comprehensive manual, but sometimes you only have the command line to help you.

.. code-block:: bash

    # Help please!
    python -h
    python --help

Basic File Operations
---------------------

**cp** copies a file from one location to another. The example will copy a file containing the genome sequence of *E. coli K12 MG1655* to your home directory.

.. code-block:: bash

    # Copy
    cp source destination
    cp /science/teaching/ecoli/GCF_000482265.1_EC_K12_MG1655_Broad_SNP_genomic.fna ~/

**mv** moves a file from one location to another. The example, because the destination is not a directory, actually renames the file. Thus you can move and rename a file with the same command.

.. code-block:: bash

    # Move or rename
    mv source destination
    mv ~/GCF_000482265.1_EC_K12_MG1655_Broad_SNP_genomic.fna ~/E.coli_K12_MG1655.fna

**rm** removes a file, so use it with care.

.. code-block:: bash

    # Remove
    rm path
    rm ~/E.coli_K12_MG1655.fna

**mkdir** creates a new directory with the given name.

.. code-block:: bash

    # Make directory
    mkdir genomes
    
 **rmdir** removes an empty directory.
 .. code-block:: bash

    # Remove directory
    rmdir genomes

Exercises
---------

* Using the commands you've been introduced to, create a new directory and copy the E. coli genome into it.
* Rename the file to something less complex.
* By using the *man* and *ls* commands, find out how large the E. coli genome file is.

.. hidden-code-block:: bash

    # First make the directory and copy the file - use tab complete instead of typing the entire file name if you can
    mkdir genomes
    cp /science/teaching/ecoli/GCF_000482265.1_EC_K12_MG1655_Broad_SNP_genomic.fna ~/genomes/

    # Now rename the file
    cd ~/genomes
    ls
    mv GCF_000482265.1_EC_K12_MG1655_Broad_SNP_genomic.fna E.coli_K12_MG1655.fna

    # How large is the file? Well the manual for ls describes the -l argument
    ls -l

    # Even better if it produces a number we can read more easily
    ls -lh
.. container:: nextlink

    `Next: Working with Files <1.4_scpandwget.html>`_

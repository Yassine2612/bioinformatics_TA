The File System
===============

You are probably used to the file system in Windows or Mac OS X, where directories can contain files and more directories. The Linux filesystem is structured in the same way, as a tree, that begins at the 'root' directory **/**. Directories are separated by slash characters **/**.

.. image:: /contents/images/filesystem_hierarchy.png

When you work on the command line, you are located in a directory somewhere in this tree. There are two ways to refer to a location: its **absolute path**, starting at the root directory, or its **relative path**.

.. code-block:: bash

    # Absolute path
    /cluster/home/<user_name>

    # Relative path
    ../home/<user_name>

The **..** refers to the directory above a location, so the relative path here goes up twice, then back down to your home directory. If a path starts with **~/** then it refers to your home directory. If a path starts with **./** then it refers to the current directory.

.. code-block:: bash
           
    # Go up one level 
    ../

    # Home directory
    ~/
    
    # Same directory
    ./

Navigation
----------

**pwd** will tell you exactly where you are in the file system. You will start off in your home folder.

.. code-block:: bash

    # Where am I?
    pwd

**ls** will list all of the files and directories where you are currently located. If you give a path as an argument, it will list the files at that location.

.. code-block:: bash

    # What is here?
    ls

**cd** will change your location, your 'working directory', to the path given, absolute or relative. If no address is given, you return to your home directory.

.. code-block:: bash

    # Going places and check where you are
    cd ..
    pwd
    
    # Going back to previous diretory
    cd -
    pwd

    # Going to your home directory
    cd
    pwd

Exercises
---------

* Use *pwd* to find out where you are in your command line session - it should be /nfs/home/<your eth name>
* Use *ls* to see if you have any files in your home directory - probably not if you have never logged in before!
* Use *cd* to go up one level and then *ls* to see all the home directories of other users on the server
* Try to go up multiple levels using cd

.. hidden-code-block:: bash
    
    # To go up one level, to the directory that contains your home directory:
    cd ..

* Use *ls* to look into the directory of another user - can you do this?
* Experiment with *cd* and *ls* to explore the directory structure on Euler, before returning to your home directory

.. hidden-code-block:: bash

    # Let's start at the 'root':
    cd /

    # Now we can have a look in the 'scratch' directory that we use to store data locally
    cd scratch
    ls

    # Finally let's go home
    cd ~

Getting Help
------------

**man** will show a manual for most basic commands, providing the correct syntax to use it and the various options available.

.. code-block:: bash

    # Read the manual
    man ls

Other programs have different ways to provide help on how to use them. A online tutorial is best, or a comprehensive manual, but sometimes you only have the command line to help you.

.. code-block:: bash

    # Help please!
    python -h
    python --help

Basic File Operations
---------------------

**cp** copies a file from one location to another. The example will copy a file containing the genome sequence of *E. coli K12 MG1655* to your home directory.

.. code-block:: bash

    # Copy
    cp <source> <destination>
    cp /cluster/home/ssunagaw/teaching/ecoli/GCF_000482265.1_EC_K12_MG1655_Broad_SNP_genomic.fna.gz ~/

**mv** moves a file from one location to another. The example actually renames the file, because the destination is not a directory. Thus you can move and rename a file with the same command.

.. code-block:: bash

    # Move or rename
    mv <source> <destination>
    mv ~/GCF_000482265.1_EC_K12_MG1655_Broad_SNP_genomic.fna.gz ~/E.coli_K12_MG1655.fna.gz

**rm** removes a file, so use it with care.

.. code-block:: bash

    # Remove
    rm <path_to_file>
    rm ~/E.coli_K12_MG1655.fna.gz

**mkdir** creates a new directory with the given name.

.. code-block:: bash

    # Make directory
    mkdir genomes
    
**rmdir** removes an empty directory.
 
.. code-block:: bash

    # Remove an empty directory
    rmdir genomes

Exercises
---------

* Using the commands you've been introduced to, create a new directory and copy the E. coli genome into it.
* Rename the file to something less complex.
* By using the *man* and *ls* commands, find out how large the E. coli genome file is.

.. hidden-code-block:: bash

    # First make the directory and copy the file - use tab complete instead of typing the entire file name if you can
    mkdir genomes
    cp /cluster/home/ssunagaw/teaching/ecoli/GCF_000482265.1_EC_K12_MG1655_Broad_SNP_genomic.fna.gz ~/genomes/

    # Now rename the file
    cd ~/genomes
    ls
    mv GCF_000482265.1_EC_K12_MG1655_Broad_SNP_genomic.fna.gz E.coli_K12_MG1655.fna.gz

    # How large is the file? Well the manual for ls describes the -l argument
    ls -l

    # Even better if it produces a number we can read more easily
    ls -lh

* Using the *man* and *cp*, find out how to copy a directory.

.. hidden-code-block:: bash

    # create two directory
    mkdir dir1
    mkdir dir2
    
    # try to copy dir1 into dir2
    cp dir1 dir2/
     cp: dir1 is a directory (not copied).
     
    # if you check 'man cp', you see that you have to use -R:
    cp -R dir dir2/
    
.. container:: nextlink

    `Next: Scp and wget appliance <1.4_scpandwget.html>`_
